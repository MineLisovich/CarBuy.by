// <auto-generated />
using System;
using CarBuy.DAL.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CarBuy.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230117105328__mig4")]
    partial class _mig4
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CarBuy.DAL.Entities.AdsCar", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddDateAds")
                        .HasColumnType("datetime2");

                    b.Property<int>("BodyCarid")
                        .HasColumnType("int");

                    b.Property<int>("BrandCarid")
                        .HasColumnType("int");

                    b.Property<int>("CarDriveid")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Customs")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EngineCarid")
                        .HasColumnType("int");

                    b.Property<string>("ExteriorElements")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GearShiftBoxid")
                        .HasColumnType("int");

                    b.Property<string>("Horsepower")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Mileage")
                        .HasColumnType("int");

                    b.Property<string>("Multimedia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ownership")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PassedModeration")
                        .HasColumnType("bit");

                    b.Property<string>("PassportCar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PastOwners")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoCar_1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoCar_2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoCar_3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoCar_4")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoCar_5")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("Rudder")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Safety")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SellersComment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VIN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("VisibleAds")
                        .HasColumnType("bit");

                    b.Property<int>("VolumeEngineCarid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("BodyCarid");

                    b.HasIndex("BrandCarid");

                    b.HasIndex("CarDriveid");

                    b.HasIndex("EngineCarid");

                    b.HasIndex("GearShiftBoxid");

                    b.HasIndex("UserId");

                    b.HasIndex("VolumeEngineCarid");

                    b.ToTable("AdsCar");

                    b.HasData(
                        new
                        {
                            id = 1,
                            AddDateAds = new DateTime(2023, 1, 17, 13, 53, 27, 948, DateTimeKind.Local).AddTicks(5666),
                            BodyCarid = 1,
                            BrandCarid = 1,
                            CarDriveid = 1,
                            Color = "Blue",
                            Condition = "Не требует ремонта",
                            Customs = "Растаможен",
                            EngineCarid = 1,
                            ExteriorElements = "Чёткие диски и салон",
                            GearShiftBoxid = 1,
                            Horsepower = "2222",
                            Mileage = 2332,
                            Multimedia = "Мультимедия классная",
                            Ownership = "6 месяцев",
                            PassedModeration = true,
                            PassportCar = "Orig",
                            PastOwners = "1 Владелец",
                            PhotoCar_1 = "1.png",
                            PhotoCar_2 = "2.png",
                            PhotoCar_3 = "3.png",
                            PhotoCar_4 = "4.png",
                            PhotoCar_5 = "5.png",
                            Price = 3999333f,
                            Rudder = "Левый руль",
                            Safety = "Безопасность ВО!",
                            SellersComment = "Машина классная",
                            UserId = "702",
                            VIN = "FJFEBHRBFJBRJH2348",
                            VisibleAds = true,
                            VolumeEngineCarid = 1
                        });
                });

            modelBuilder.Entity("CarBuy.DAL.Entities.BodyCar", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NameBodyCar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("BodyCar");

                    b.HasData(
                        new
                        {
                            id = 1,
                            NameBodyCar = "Седан"
                        },
                        new
                        {
                            id = 2,
                            NameBodyCar = "Внедорожник"
                        },
                        new
                        {
                            id = 3,
                            NameBodyCar = "Хэтчбек"
                        },
                        new
                        {
                            id = 4,
                            NameBodyCar = "Лифтбек"
                        },
                        new
                        {
                            id = 5,
                            NameBodyCar = "Универсал"
                        },
                        new
                        {
                            id = 6,
                            NameBodyCar = "Минивэн"
                        },
                        new
                        {
                            id = 7,
                            NameBodyCar = "Купе"
                        },
                        new
                        {
                            id = 8,
                            NameBodyCar = "Пикап"
                        },
                        new
                        {
                            id = 9,
                            NameBodyCar = "Кабриолет"
                        },
                        new
                        {
                            id = 10,
                            NameBodyCar = "Фургон"
                        });
                });

            modelBuilder.Entity("CarBuy.DAL.Entities.BrandCar", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NameBrandCar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("BrandCar");

                    b.HasData(
                        new
                        {
                            id = 1,
                            NameBrandCar = "Audi"
                        });
                });

            modelBuilder.Entity("CarBuy.DAL.Entities.CarDrive", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NameCarDrive")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("CarDrive");

                    b.HasData(
                        new
                        {
                            id = 1,
                            NameCarDrive = "Передний"
                        },
                        new
                        {
                            id = 2,
                            NameCarDrive = "Задний"
                        },
                        new
                        {
                            id = 3,
                            NameCarDrive = "Полный"
                        });
                });

            modelBuilder.Entity("CarBuy.DAL.Entities.EngineCar", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NameEngine")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("EngineCar");

                    b.HasData(
                        new
                        {
                            id = 1,
                            NameEngine = "Бензин"
                        },
                        new
                        {
                            id = 2,
                            NameEngine = "Дизель"
                        },
                        new
                        {
                            id = 3,
                            NameEngine = "Гибрит"
                        },
                        new
                        {
                            id = 4,
                            NameEngine = "Электро"
                        });
                });

            modelBuilder.Entity("CarBuy.DAL.Entities.FavouritesAds", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdsCarid")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("AdsCarid");

                    b.HasIndex("UserId");

                    b.ToTable("FavouritesAds");

                    b.HasData(
                        new
                        {
                            id = 1,
                            AdsCarid = 1,
                            UserId = "702"
                        });
                });

            modelBuilder.Entity("CarBuy.DAL.Entities.GearShiftBox", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NameGearShiftBox")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("GearShiftBox");

                    b.HasData(
                        new
                        {
                            id = 1,
                            NameGearShiftBox = "Автоматическая"
                        },
                        new
                        {
                            id = 2,
                            NameGearShiftBox = "Механическая"
                        },
                        new
                        {
                            id = 3,
                            NameGearShiftBox = "Робот"
                        },
                        new
                        {
                            id = 4,
                            NameGearShiftBox = "Вариатор"
                        });
                });

            modelBuilder.Entity("CarBuy.DAL.Entities.GenerationModelCar", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ModelBrandCarid")
                        .HasColumnType("int");

                    b.Property<string>("NameGenerationModel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("ModelBrandCarid");

                    b.ToTable("GenerationModelCar");

                    b.HasData(
                        new
                        {
                            id = 1,
                            ModelBrandCarid = 1,
                            NameGenerationModel = "2019-2023 II(4K)"
                        });
                });

            modelBuilder.Entity("CarBuy.DAL.Entities.ModelBrandCar", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandCarid")
                        .HasColumnType("int");

                    b.Property<string>("NameModelBrand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("BrandCarid");

                    b.ToTable("ModelBrandCar");

                    b.HasData(
                        new
                        {
                            id = 1,
                            BrandCarid = 1,
                            NameModelBrand = "rs7"
                        });
                });

            modelBuilder.Entity("CarBuy.DAL.Entities.VolumeEngineCar", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("VolumeEngine")
                        .HasColumnType("real");

                    b.HasKey("id");

                    b.ToTable("VolumeEngineCar");

                    b.HasData(
                        new
                        {
                            id = 1,
                            VolumeEngine = 0.2f
                        },
                        new
                        {
                            id = 2,
                            VolumeEngine = 0.2f
                        },
                        new
                        {
                            id = 3,
                            VolumeEngine = 0.3f
                        },
                        new
                        {
                            id = 4,
                            VolumeEngine = 0.4f
                        },
                        new
                        {
                            id = 5,
                            VolumeEngine = 0.5f
                        },
                        new
                        {
                            id = 6,
                            VolumeEngine = 0.6f
                        },
                        new
                        {
                            id = 7,
                            VolumeEngine = 0.7f
                        },
                        new
                        {
                            id = 8,
                            VolumeEngine = 0.8f
                        },
                        new
                        {
                            id = 9,
                            VolumeEngine = 0.9f
                        },
                        new
                        {
                            id = 10,
                            VolumeEngine = 1f
                        },
                        new
                        {
                            id = 11,
                            VolumeEngine = 1.1f
                        },
                        new
                        {
                            id = 12,
                            VolumeEngine = 1.2f
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "601",
                            ConcurrencyStamp = "a9fd5cfe-2fa5-4c65-ba46-26104ef8a4ca",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "602",
                            ConcurrencyStamp = "b67439fa-660f-4b1c-aeb7-4cf04f4cbc4c",
                            Name = "user",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "603",
                            ConcurrencyStamp = "478977ea-ffed-45d4-bb71-d043d02a2608",
                            Name = "moder",
                            NormalizedName = "MODER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "701",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2faeaf38-3158-4b89-a88a-b163e1f6d1b2",
                            Email = "deeLimpay@mail.ru",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "deeLimpay@mail.ru",
                            NormalizedUserName = "deeLimpay",
                            PasswordHash = "AQAAAAEAACcQAAAAENiv3KN8CfHfs9roJvpwkM1xF/akb5ydiaU+f9qyiUDVeHqGengNv8jd1RFj1qVxLg==",
                            PhoneNumber = "+375433332323",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "deeLimpay"
                        },
                        new
                        {
                            Id = "702",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "70985885-0a48-46a6-bff5-836dc6e91ea4",
                            Email = "stepa@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "stepa@gmail.com",
                            NormalizedUserName = "Stepashka",
                            PasswordHash = "AQAAAAEAACcQAAAAECou3YiZS8HwU2621REfCUsDJy14+MNZYm4zttzBAYEZiqXLNp7AX6gw4bLjWox+aw==",
                            PhoneNumber = "+375231884433",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Stepashka"
                        },
                        new
                        {
                            Id = "703",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a0a7855d-884f-49ab-8ab8-410966364eed",
                            Email = "mod@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "mod@gmail.com",
                            NormalizedUserName = "Moder",
                            PasswordHash = "AQAAAAEAACcQAAAAEE+RTv9C/imFWITFC8s5sa8hohkBlhL3iRkCiqyUVtUznPAPd8b4qHfvZoxhAeFMsw==",
                            PhoneNumber = "+375231880433",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Moder"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "701",
                            RoleId = "601"
                        },
                        new
                        {
                            UserId = "702",
                            RoleId = "602"
                        },
                        new
                        {
                            UserId = "703",
                            RoleId = "603"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CarBuy.DAL.Entities.AdsCar", b =>
                {
                    b.HasOne("CarBuy.DAL.Entities.BodyCar", "BodyCar")
                        .WithMany()
                        .HasForeignKey("BodyCarid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarBuy.DAL.Entities.BrandCar", "BrandCar")
                        .WithMany()
                        .HasForeignKey("BrandCarid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarBuy.DAL.Entities.CarDrive", "CarDrive")
                        .WithMany()
                        .HasForeignKey("CarDriveid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarBuy.DAL.Entities.EngineCar", "EngineCar")
                        .WithMany()
                        .HasForeignKey("EngineCarid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarBuy.DAL.Entities.GearShiftBox", "GearShiftBox")
                        .WithMany()
                        .HasForeignKey("GearShiftBoxid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("CarBuy.DAL.Entities.VolumeEngineCar", "VolumeEngineCar")
                        .WithMany()
                        .HasForeignKey("VolumeEngineCarid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarBuy.DAL.Entities.FavouritesAds", b =>
                {
                    b.HasOne("CarBuy.DAL.Entities.AdsCar", "AdsCar")
                        .WithMany()
                        .HasForeignKey("AdsCarid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("CarBuy.DAL.Entities.GenerationModelCar", b =>
                {
                    b.HasOne("CarBuy.DAL.Entities.ModelBrandCar", "ModelBrandCar")
                        .WithMany()
                        .HasForeignKey("ModelBrandCarid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarBuy.DAL.Entities.ModelBrandCar", b =>
                {
                    b.HasOne("CarBuy.DAL.Entities.BrandCar", "BrandCar")
                        .WithMany()
                        .HasForeignKey("BrandCarid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
